// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"io"
	"sync"

	"go.cryptoscope.co/luigi"
	"go.cryptoscope.co/ssb"
)

type FakeBlobStore struct {
	GetStub        func(ref *ssb.BlobRef) (io.Reader, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		ref *ssb.BlobRef
	}
	getReturns struct {
		result1 io.Reader
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	PutStub        func(blob io.Reader) (*ssb.BlobRef, error)
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		blob io.Reader
	}
	putReturns struct {
		result1 *ssb.BlobRef
		result2 error
	}
	putReturnsOnCall map[int]struct {
		result1 *ssb.BlobRef
		result2 error
	}
	DeleteStub        func(ref *ssb.BlobRef) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		ref *ssb.BlobRef
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	ListStub        func() luigi.Source
	listMutex       sync.RWMutex
	listArgsForCall []struct{}
	listReturns     struct {
		result1 luigi.Source
	}
	listReturnsOnCall map[int]struct {
		result1 luigi.Source
	}
	SizeStub        func(ref *ssb.BlobRef) (int64, error)
	sizeMutex       sync.RWMutex
	sizeArgsForCall []struct {
		ref *ssb.BlobRef
	}
	sizeReturns struct {
		result1 int64
		result2 error
	}
	sizeReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	ChangesStub        func() luigi.Broadcast
	changesMutex       sync.RWMutex
	changesArgsForCall []struct{}
	changesReturns     struct {
		result1 luigi.Broadcast
	}
	changesReturnsOnCall map[int]struct {
		result1 luigi.Broadcast
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlobStore) Get(ref *ssb.BlobRef) (io.Reader, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		ref *ssb.BlobRef
	}{ref})
	fake.recordInvocation("Get", []interface{}{ref})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(ref)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeBlobStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeBlobStore) GetArgsForCall(i int) *ssb.BlobRef {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].ref
}

func (fake *FakeBlobStore) GetReturns(result1 io.Reader, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobStore) GetReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobStore) Put(blob io.Reader) (*ssb.BlobRef, error) {
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		blob io.Reader
	}{blob})
	fake.recordInvocation("Put", []interface{}{blob})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(blob)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.putReturns.result1, fake.putReturns.result2
}

func (fake *FakeBlobStore) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakeBlobStore) PutArgsForCall(i int) io.Reader {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].blob
}

func (fake *FakeBlobStore) PutReturns(result1 *ssb.BlobRef, result2 error) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 *ssb.BlobRef
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobStore) PutReturnsOnCall(i int, result1 *ssb.BlobRef, result2 error) {
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 *ssb.BlobRef
			result2 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 *ssb.BlobRef
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobStore) Delete(ref *ssb.BlobRef) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		ref *ssb.BlobRef
	}{ref})
	fake.recordInvocation("Delete", []interface{}{ref})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(ref)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeBlobStore) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeBlobStore) DeleteArgsForCall(i int) *ssb.BlobRef {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].ref
}

func (fake *FakeBlobStore) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobStore) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobStore) List() luigi.Source {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct{}{})
	fake.recordInvocation("List", []interface{}{})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listReturns.result1
}

func (fake *FakeBlobStore) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeBlobStore) ListReturns(result1 luigi.Source) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 luigi.Source
	}{result1}
}

func (fake *FakeBlobStore) ListReturnsOnCall(i int, result1 luigi.Source) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 luigi.Source
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 luigi.Source
	}{result1}
}

func (fake *FakeBlobStore) Size(ref *ssb.BlobRef) (int64, error) {
	fake.sizeMutex.Lock()
	ret, specificReturn := fake.sizeReturnsOnCall[len(fake.sizeArgsForCall)]
	fake.sizeArgsForCall = append(fake.sizeArgsForCall, struct {
		ref *ssb.BlobRef
	}{ref})
	fake.recordInvocation("Size", []interface{}{ref})
	fake.sizeMutex.Unlock()
	if fake.SizeStub != nil {
		return fake.SizeStub(ref)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.sizeReturns.result1, fake.sizeReturns.result2
}

func (fake *FakeBlobStore) SizeCallCount() int {
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	return len(fake.sizeArgsForCall)
}

func (fake *FakeBlobStore) SizeArgsForCall(i int) *ssb.BlobRef {
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	return fake.sizeArgsForCall[i].ref
}

func (fake *FakeBlobStore) SizeReturns(result1 int64, result2 error) {
	fake.SizeStub = nil
	fake.sizeReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobStore) SizeReturnsOnCall(i int, result1 int64, result2 error) {
	fake.SizeStub = nil
	if fake.sizeReturnsOnCall == nil {
		fake.sizeReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.sizeReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobStore) Changes() luigi.Broadcast {
	fake.changesMutex.Lock()
	ret, specificReturn := fake.changesReturnsOnCall[len(fake.changesArgsForCall)]
	fake.changesArgsForCall = append(fake.changesArgsForCall, struct{}{})
	fake.recordInvocation("Changes", []interface{}{})
	fake.changesMutex.Unlock()
	if fake.ChangesStub != nil {
		return fake.ChangesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.changesReturns.result1
}

func (fake *FakeBlobStore) ChangesCallCount() int {
	fake.changesMutex.RLock()
	defer fake.changesMutex.RUnlock()
	return len(fake.changesArgsForCall)
}

func (fake *FakeBlobStore) ChangesReturns(result1 luigi.Broadcast) {
	fake.ChangesStub = nil
	fake.changesReturns = struct {
		result1 luigi.Broadcast
	}{result1}
}

func (fake *FakeBlobStore) ChangesReturnsOnCall(i int, result1 luigi.Broadcast) {
	fake.ChangesStub = nil
	if fake.changesReturnsOnCall == nil {
		fake.changesReturnsOnCall = make(map[int]struct {
			result1 luigi.Broadcast
		})
	}
	fake.changesReturnsOnCall[i] = struct {
		result1 luigi.Broadcast
	}{result1}
}

func (fake *FakeBlobStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	fake.changesMutex.RLock()
	defer fake.changesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlobStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssb.BlobStore = new(FakeBlobStore)
